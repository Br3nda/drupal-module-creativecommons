<?php
// $Id: creativecommons.module,v 1.9.2.11 2009/07/03 21:43:11 balleyne Exp $

/**
 * @file
 * Creative Commons Drupal module
 *   Allows content within a site or attached to a node to
 *   be assigned a Creative Commons license.
 *   http://creativecommons.org/license/
 *
 *
 * By: Peter Bull <pbull@ltc.org>
 * 2005-02-28 / digitalbicycle.org / ltc.org
 * This software is released under the terms of the LGPL license, relicensed
 * under GPLv2 for drupal.org.
 *
 * Utilizes code and inspiration from http://cclicense.sourceforge.net/
 *   Originally released by Blake Watters <sbw@ibiblio.org>
 *   under the terms of the LGPL license (now, GPLv2 for drupal.org).
 *
 */

//TODO: installation guidance
//TODO: set notification message when default license gets set
//TODO: enable CC license by content type, like CC lite
//TODO: implement mandatory license option (like cc lite)
//TODO: make site license another block so it's more flexible?
//TODO: validate selected licenses against available licenses (done for default licenses, but both a form_set_error and drupal_set_message get displayed on failed POST)
//  license validation doesn't handle blanks well yet...
//TODO: review support for metadata fields (is some of this redundant in Drupal?)
//TODO: rename available_licenses to available_license_types
//TODO: move cc_settingS_validate warning to somewhere else... needed for license selection form as well

define('CC_PATH', drupal_get_path('module', 'creativecommons'));
define('CC_IMG_PATH', base_path() . CC_PATH .'/images/');
define('CC_JS_PATH', base_path() . CC_PATH .'/js/');

require_once('creativecommons.class.php');


/**
 * Enclose each arg in paragraph tags.
 */
function cc_para() {
  $args = func_get_args();
  $p = '';
  foreach ($args as $c)
    $p .= "<p>$c</p>";
  return $p;
}


/**
 * Implementation of hook_perm().
 */
function creativecommons_perm() {
  return array('administer creative commons');
}


/**
 * Implementation of hook_menu().
 */
function creativecommons_menu() {
  $items = array();

  $items['admin/settings/creativecommons'] = array(
    'title' => 'Creative Commons',
    'description' => 'Configure the Creative Commons settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('creativecommons_settings'),
    'access arguments' => array('administer creative commons')
  );

  $items['admin/settings/creativecommons/edit'] = array(
    'title' => 'settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['admin/settings/creativecommons/default'] = array(
    'title' => 'default license',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creativecommons_default_license'),
    'access arguments' => array('administer creative commons'),
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/settings/creativecommons/site'] = array(
    'title' => 'site license',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('creativecommons_site_license'),
    'access arguments' => array('administer creative commons'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}


/**
 * Implementation of hook_help().
 */
function creativecommons_help($path, $arg) {
  $cc_desc = 'A Creative Commons license helps you publish your work online while letting others know exactly what they can and can\'t do with your work. Creative Commons offers a flexible range of protections and freedoms for authors and artists, built upon the "all rights reserved" concept of traditional copyright to create a voluntary "some rights reserved" copyright.';
  $cc_desc_short = 'Assign a Creative Commons license to content that appears on the site.';
  $cc_node = 'Attaching a Creative Commons license to a node within Drupal can designate the content of that node, as well as any attached files, as available under that license.';
  $cc_url = 'For more information, visit <a href="http://creativecommons.org/learnmore">http://creativecommons.org/learnmore</a>.';

  switch ($path) {
    case 'admin/modules#description':
      return t($cc_desc_short);
    case 'admin/settings/creativecommons':
      return t(cc_para($cc_desc, $cc_node, $cc_url));
    case 'admin/help#creativecommons':
      return t(cc_para($cc_desc, $cc_node, $cc_url));
  }
}

/**
 * General Creative Commons settings page.
 */
function creativecommons_settings() {
  $available_licenses = variable_get('creativecommons_available_licenses', array());
  $license_array_keys = creativecommons_get_license_array(array('jurisdiction' => variable_get('creativecommons_jurisdiction', '')), TRUE);
  $metadata_types_keys = creativecommons_get_metadata_types();

  $form['creativecommons_license'] = array(
    '#type' => 'fieldset',
    '#title' => t('License selection'),
  );

  $q = creativecommons_get_questions_array('standard');
  $form['creativecommons_license']['creativecommons_jurisdiction'] = array(
    '#type' => 'select',
    '#title' => t(str_replace(':', '', $q['jurisdiction']['question'])),
    '#description' => t($q['jurisdiction']['description']),
    '#options' => creativecommons_format_jurisdiction_array($q['jurisdiction']['answers']),
    '#default_value' => variable_get('creativecommons_jurisdiction', ''),
  );

  $form['creativecommons_license']['creativecommons_available_licenses'] = array(
    '#type' => 'select',
    '#title' => t('Available licenses'),
    '#default_value' => $available_licenses,
    '#options' => $license_array_keys,
    '#description' => t('Select the license types to make available to users.'),
    '#multiple' => TRUE,
  );

  $form['creativecommons_license']['creativecommons_mandatory'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mandatory license specification'),
    '#description' => t('Specifies whether or not the user is required to specify a license for content on the site.'),
    '#default_value' => variable_get('creativecommons_mandatory', 0),
  );

  $form['creativecommons_license']['creativecommons_required'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Required metadata fields'),
    '#default_value' => variable_get('creativecommons_required', array()),
    '#options' => $metadata_types_keys,
    '#description' => t('This option allows you to require specific metadata to be included when a license is applied.'),
  );

  //-------------------

  $form['creativecommons_display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node display'),
  );

  $form['creativecommons_display']['creativecommons_display'] = array(
    '#type' => 'radios',
    '#title' => t('Display license information'),
    '#default_value' => variable_get('creativecommons_display', 1),
    '#options' => array(
      t('Display text'),
      t('Display text and Creative Commons logo'),
      t('Display text and icons'),
      t('Do not display license')
    ),
    '#description' => t('You can display license details when viewing a node.'),
    '#required' => TRUE,
    '#attributes' => FALSE,
  );

  $form['creativecommons_display']['creativecommons_rdf'] = array(
    '#type' => 'checkbox',
    '#title' => t('Insert RDF into HTML'),
    '#return_value' => 1,
    '#default_value' => variable_get('creativecommons_rdf', TRUE),
    '#description' => t('Attach license information within the HTML to let your visitors know what license applies to your works.'),
  );
  return system_settings_form($form);

}

/**
 * Validate general creative commons settings.
 */
function creativecommons_settings_validate($node, &$form) {
//TODO: should this be here? (no errors displays when settings page first loaded)  should it set message or error?
  if (empty($form['values']['creativecommons_available_licenses']))
    //form_set_error('creativecommons_avaiable_licenses', 'You must enable at least one license for this module to work properly.');
    drupal_set_message('No licenses are enabled.', 'warning');
}

/**
 * Creative Commons site license settings form
 */
function creativecommons_default_license() {
  global $base_url;
  $prefix = 'creativecommons_default';

  $form = creativecommons_select_license_form($node, $prefix);
  $form['#submit'][] = 'creativecommons_default_license_submit';

  // append metadata fields and defaults site values
  global $base_url;
  $defaults = array('format' => 'interactive', 'source' => $base_url);
  foreach (array('description' => 'site_slogan', 'description' => 'site_mission',
    'title' => 'site_name') as $mn => $vv) {
    $gv = variable_get($vv, NULL);
    if (!is_null($gv) && drupal_strlen($gv) > 0)
      $defaults[$mn] = $gv;
  }

  if (!is_null($node->cc->license_type) && $node->cc->license_type != 'none') {
    $display2 = creativecommons_build_metadata_fields($node, $prefix, $defaults);
    $form['select_license_form']['creativecommons_site']['metadata'] = $display2['creativecommons_site']['metadata'];
  }

  return system_settings_form($form);
}

/**
 * Save Creative Commons default license. Implementation of hook_submit().
 */
function creativecommons_default_license_submit($node, &$form) {exit('here?');
  $cc = new creativecommons_license($form['values']['creativecommons_default_license']);
  $form['values']['creativecommons_default_license'] = serialize($cc);

/*TODO: delete    if ($cc){
      // save serialized data
      $cc_data = serialize($cc);
      variable_set($prefix .'_license', $cc_data);
    }*/

    // TODO: does something need to be unset?

    // TODO: Optional -- questions
    /* make it work
    foreach ($_POST['select_license_form'] as $key => $val) {
      $_POST[$key] = $val;
    }
    unset($_POST['select_license_form']);
    $questions = creativecommons_get_questions_array($p);
    foreach ($questions as $k => $v) {
      $post_val = $_POST[$prefix][$k];
      if (in_array($post_val, $v['answers'])) {
        $questions[$k]['selected'] = $post_val;
      }
      else {
        // default to first answer in array
        $questions[$k]['selected'] = current($v['answers']);
      }
    }
    if (!$_POST[$prefix]['metadata']['source'])
      $_POST[$prefix]['metadata']['source'] = $base_url;
    $cc = new creativecommons_license($_POST[$prefix .'_license'], NULL, $_POST[$prefix]['metadata']);

    // save serialized data
    variable_set('creativecommons_default_license', serialize($cc));*/

}
/**
 * Creative Commons site license display settings form
 */
function creativecommons_site_license() {
  $prefix = 'creativecommons_site_license';

  // save fields
  if ($_POST) {
    variable_set($prefix .'_license_display', $_POST['edit'][$prefix .'_license_display']);
    variable_set($prefix .'_license_embed', $_POST['edit'][$prefix .'_license_embed']);
    variable_set($prefix .'_footer_text', $_POST['edit'][$prefix .'_footer_text']);
  }

  // site license display
  $form[$prefix .'_display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display default license as site license on each page?'),
    '#return_value' => 1,
    '#default_value' => variable_get($prefix .'_display', FALSE),
  );
  /* TODO: use this?
  $form[$prefix .'_license_embed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed license metadata in the HTML of the site'),
    '#return_value' => 1,
    '#default_value' => variable_get($prefix .'_license_embed', FALSE),
  );*/
  $form[$prefix .'_additional_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional text'),
    '#default_value' => variable_get($prefix .'_additional_text', NULL),
    '#cols' => 60,
    '#rows' => 3,
    '#description' => t('This text will accompany the display of the site license.'),
    '#attributes' => NULL,
    '#required' => NULL,
  );

  return system_settings_form($form);
}


/**
 * Display license selection form
 *
 * @param $simple - use simple chooser if true
 */
function creativecommons_select_license_form($node, $prefix, $simple = TRUE) {
  // load available licenses
  $types = creativecommons_get_available_licenses(array('jurisdiction' => variable_get('creativecommons_jurisdiction', '')), TRUE);

  $cc = $node->cc ? $node->cc : creativecommons_get_default_license();
  
  // Check to see if selected license is available
  if ($cc && !creativecommons_is_available_license($cc))
    drupal_set_message('The "'. $cc->get_full_license_name() .'" license is no longer available. Please select another license.', 'warning');

  if ($simple) {
    //TODO: change license to 'license_uri' for clarity
    $form['select_license_form'][$prefix .'_license'] = array(
      '#type' => 'select',
      '#title' => t('Select a license'),
      '#default_value' => $cc->license_uri,
      '#options' => $types,
      '#attributes' => $extra,
      '#description' => NULL,
    );
  }
  else{

    $form['select_license_form'] = array(
      '#type' => 'fieldset',
      '#title' => t('License'),
      '#tree' => TRUE,
    );

    $question_array = creativecommons_get_questions_array($node->cc->license_type);
    foreach ($question_array as $k => $v) {
      if ($node->cc->$k !== NULL) {
        $question_array[$k]['selected'] = $node->cc->$k;
      }
      else {
        // default to first answer in array
        $question_array[$k]['selected'] = current($v['answers']);
      }
    }

    foreach ($question_array as $q => $a) {
      // Set options from answers
      $options = array();
      foreach ($a['answers'] as $k => $v)
        $options[$v] = $k;

      $required = TRUE;
      if ($q == 'jurisdiction') {
        $options = creativecommons_format_jurisdiction_array($a['answers']);
        $required = FALSE;
      }


      $form['select_license_form'][$prefix .''][''. $q] = array(
        '#type' => (count($a['answers']) <= 3 ? 'radios' : 'select'),
        '#title' => str_replace(':', '', $a['question']),
        '#default_value' => $node->cc->$q,
        '#options' => $options,
        '#description' => $a['description'],
        '#required' => $required,
        '#tree' => TRUE,

      );
    }
  }
return $form;
}


/**
 * Return default license
 */
function creativecommons_get_default_license() {
  $cc_data = variable_get('creativecommons_default_license', NULL);
  if ($cc_data)
    return unserialize($cc_data);
}

/**
 * Return default license URI.
 */
function creativecommons_get_default_license_uri() {
  $cc = creativecommons_get_default_license();
  return $cc->license_uri;
}

/**
 * Return array of license classes parsed from licenses.xml
 *
 * @return array of license classes in the form id => title
 */
//TODO: deprecated -- make sure it's not being used, then delete
function creativecommons_get_license_classes() {
  $classes = array();
  $classes_xml = creativecommons_return_xml('classes');
  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parse_into_struct($parser, $classes_xml, $classes_array, $index);
  xml_parser_free($parser);
  foreach ($classes_array as $key)
    if ($key['tag'] == 'license' && $key['level'] == 2)
      $classes[$key['attributes']['id']] = $key['value'];
  return $classes;
}

/**
 * Parse license URI and return type.
 * @param $uri - a valid CC license uri
 * @return license type (e.g. 'by-sa')
 */
function creativecommons_get_license_type_from_uri($uri) {
  $parts = explode('/', $uri);

  return $parts[4];
}

/**
 * Strip out jurisdiction and version from license name.
 *
 * @param $name - full name of a CC license
 * @return license name, without version number or jurisdiction
 */
function creativecommons_generic_license_name($full_name) {
  $name_parts = explode(' ', $full_name);
  $version_part = count($name_parts);

  // Find the version number (only numeric part)
  $i = 0;
  foreach ($name_parts as $part) {
    if (is_numeric($part))
      $version_part = $i;
    $i++;
  }

  // Build the name, up to but not including version number
  $name = $name_parts[0];
  for ($i=1;$i<$version_part;$i++)
    $name .= ' '. $name_parts[$i] ;

  return $name;
}


//TODO: this method is not in use -- questions seem more reliable
function creativecommons_get_jurisdictions() {
  $uri = '/support/jurisdictions';
  $xml = '<jurisdictions>'. creativecommons_return_xml('jurisdictions', $uri) .'</jurisdictions>';

  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parse_into_struct($parser, $xml, $values, $index);
  xml_parser_free($parser);

  $jurisdictions = array('' => 'Generic');
  foreach ($values as $key) {
    if ($key['tag'] == 'option' && $key['level'] == 2) {
      $id = explode('/', $key['attributes']['value']);
      $jurisdictions[$id[4]] = $key['value'];
    }
  }

  return $jurisdictions;
}

/**
 * Take the raw array of jurisdictions from the CC API and format it for use in
 * a Drupal form by flipping keys/values, and sorting by Jurisdiction name
 * @param $raw_array - array of jurisdictions from CC API
 * @return array of jurisdictions for use in Drupal form
 */
function creativecommons_format_jurisdiction_array($raw_array) {
  $jurisdictions = array();

  foreach ($raw_array as $name => $id)
    $jurisdictions[$id] = $name;

  // Sort by Jurisdiction name
  asort($jurisdictions);

  // Move special case 'Generic' to front
  $generic = array('' => $jurisdictions['']);
  unset($jurisdictions['']);
  $jurisdictions = array_merge($generic, $jurisdictions);

  return $jurisdictions;
}


/**
 * Return array of all available licenses, grouped by class, for use in a Drupal
 * form.
 *
 * @param $options - optional array of options for CC API simple license
 * chooser, as per: http://api.creativecommons.org/docs/readme_15.html#simple-chooser
 * @param $value_as_type - if set to TRUE, the key for each license will be the
 *                        license type (e.g. 'by-sa'), instead of the full URI.
 * @return array of all available license
 */
function creativecommons_get_license_array($options = NULL, $value_as_type = FALSE) {
  $types = array();

  //Add All Rights Reserved
  $types['all'] = 'All Rights Reserved';

  // License classes
  $types['Creative Commons'] = array();
  $types['Public Domain'] = array();

  // Manual adjustments for 'standard' class
  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);

  $uri = 'simple/chooser';
  if ($options)
    $uri .= '?'. http_build_query($options);
  $standard_xml = '<standard>'. creativecommons_return_xml('simple', $uri) .'</standard>';

  xml_parse_into_struct($parser, $standard_xml, $standard_licenses, $index);
  xml_parser_free($parser);

  foreach ($standard_licenses as $key) {
    if ($key['tag'] == 'option' && $key['level'] == 2) {
      // strip out license type identifier from uri
      $license_uri = $key['attributes']['value'];
      $license_type = creativecommons_get_license_type_from_uri($license_uri);

      $license_key = $value_as_type ? $license_type : $license_uri;
      $license_name = $value_as_type ? creativecommons_generic_license_name($key['value']) : $key['value'];

      $license_class = $license_type == 'publicdomain' ? 'Public Domain' : 'Creative Commons';
      $types[$license_class][$license_key] = $license_name;
    }
  }

  //Add CC0
  //TODO: http://creativecommons.org/license/zero/partner?lang=en&partner={partner}&exit_url={exit_url}&license_code=publicdomain&stylesheet={stylesheet}
  $zero_uri = 'http://creativecommons.org/publicdomain/zero/1.0/';
  $zero_title = 'CC0 1.0 Universal';

  if ($value_as_type)
    $types['Public Domain']['zero'] = creativecommons_generic_license_name($zero_title);
  else
    $types['Public Domain'][$zero_uri] = $zero_title;

  return $types;
}

/**
 * Return an array of available licenses.
 * @param $options -- options for querying the CC API for available licenses
 * @param $first_entry_blank -- if TRUE, insert blank entry at start of array
 *
 * @return array of available licenses
 */
function creativecommons_get_available_licenses($options = NULL, $first_entry_blank = FALSE) {
  $licenses = creativecommons_get_license_array($options);

  if ($first_entry_blank)
    $licenses = array_merge(array(''), $licenses);

  $available_licenses = variable_get('creativecommons_available_licenses', array());
  
  return creativecommons_remove_unavailable_licenses($licenses, $available_licenses);
}

/**
 * Takes a list of licenses and unsets any which are not available in the site settings.
 * @param $list  list of licenses to check
 */
function creativecommons_remove_unavailable_licenses($list, $available_licenses) {
  foreach ($list as $key => $value) {
    if (is_array($value))
      $list[$key] = creativecommons_remove_unavailable_licenses(&$value, $available_licenses);
    else if (!in_array($key, $available_licenses) && !in_array(creativecommons_get_license_type_from_uri($key), $available_licenses))
      unset($list[$key]);
  }

  return $list;
}

/**
 * Return true if license is available, false otherwise.
 */
function creativecommons_is_available_license($cc) {
  if ($cc)
    return creativecommons_is_available_license_uri($cc->license_uri);
  else
    return false;
}
/**
 * Return true if license uri is of available type, false otherwise.
 */
function creativecommons_is_available_license_uri($license_uri) {
  $available_licenses = variable_get('creativecommons_available_licenses', array());
  $license_type = creativecommons_get_license_type_from_uri($license_uri);

  return in_array($license_type, $available_licenses);
}

/**
 * Send HTTP Request to CC API services.
 * $uri     relative uri of file content on CC api site, not inclucing interface root (can be '')
 * $headers An array containing an HTTP header => value pair.
 * $method  A string defining the HTTP request to use.
 * $data    A string containing data to include in the request.
 */
function creativecommons_api_request($uri, $headers = array(), $method = 'GET', $data = NULL) {
  //TODO: set the interface root as a drupal variable? (so that it could be changed, to dev, for example)
  $uri = 'http://api.creativecommons.org/rest/1.5'. (strpos($uri, '/') === 0 ? $uri : '/'. $uri);

  $result = drupal_http_request($uri, $headers, $method, $data);

  if ($result->error)
    drupal_set_message('Error accessing CC API: '. $result->error, 'error', FALSE);

  return $result;
}

/**
 * Refreshes cached XML if file is greater than $hrs hours old
 * $filename	name up file to be retrieved/updated
 * $uri		uri of file content on CC api site, beyond the interface root (if any)
 * $hrs		file should be updated if older then X number of hours
 * $update	force update of the file
 */
//TODO: hours should be set back to 24 when development is over
function creativecommons_return_xml($filename, $uri = '', $hrs = 0, $update = FALSE) {
  // check for xml variable
  $xml = variable_get('creativecommons_'. $filename, NULL);
  if ($xml) {

    // get timestamp ***directly from variables table*** to avoid caching
    $result = db_query("SELECT value FROM {variable} WHERE name = '%s'", 'creativecommons_'. $filename .'_timestamp');
    if ($row = db_fetch_object($result)) {
      if ($ts = unserialize($row->value)) {
        $diff = (time() - $ts)/60/60;
        if ($diff >= $hrs)
          $update = TRUE;
      }
      else $update = TRUE;
    }
    else $update = TRUE;
  }
  else $update = TRUE;

  // request xml
  if ($update) {
    $headers = array();
    $result = creativecommons_api_request($uri, $headers);
    switch ($result->code) {
      case 200:
        variable_set('creativecommons_'. $filename, $result->data);
        variable_set('creativecommons_'. $filename .'_timestamp', time());
        return $result->data;
        break;
      default:
        return;
        break;
    }
  }
  else return $xml;
}

/**
 * Return associative array of metadata names/descriptions
 */
function creativecommons_get_metadata_types() {
  return array(
    'format' => t('Format of work'),
    'title' => t('Title of work'),
    'description' => t('Description'),
    'creator' => t('Creator\'s name'),
    'rights' => t('<a href="http://creativecommons.org/jargon/copyright" onclick="cc_popup(\'http://creativecommons.org/jargon/copyright\');return FALSE;">Copyright</a> holder\'s name'),
    'date' => t('<a href="http://creativecommons.org/jargon/copyright_date" onclick="cc_popup(\'http://creativecommons.org/jargon/copyright_date\');return FALSE;">Year of copyright</a>'),
    'source' => t('<a href="http://creativecommons.org/jargon/source_work" onclick="cc_popup(\'http://creativecommons.org/jargon/source_work\');return FALSE;">Source work</a> URL')
  );
}


/**
 * Return array of questions for specified license
 */
function creativecommons_get_questions_array($license_id) {
  $question_xml = creativecommons_get_questions_xml($license_id);
  $parser = xml_parser_create();
  xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
  xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
  xml_parse_into_struct($parser, $question_xml, $values, $index);
  xml_parser_free($parser);

  $questions = array();
  foreach ($values as $xn) {

    // new question array item
    if ($xn['tag'] == 'field' && $xn['type'] == 'open') {
      $current = $xn['attributes']['id'];
      $questions[$current] = array();
    }

    // set description
    if ($xn['tag'] == 'description')
      $questions[$current]['description'] = $xn['value'];

    // set question
    if ($xn['tag'] == 'label' && is_null($questions[$current]['answers'])
      && $current !== NULL && is_null($ans_lbl)) {
      $questions[$current]['question'] = $xn['value'];
    }

    // set answer labels/values
    if ($ans_lbl !== NULL && $ans_val !== NULL) {
      $questions[$current]['answers'][$ans_val] = $ans_lbl;
      $ans_lbl = NULL;
      $ans_val = NULL;
    }
    if ($xn['tag'] == 'enum' && $xn['type'] == 'open')
      $ans_lbl = $xn['attributes']['id'];
    if ($xn['tag'] == 'label' && $ans_lbl !== NULL)
      $ans_val = $xn['value'];
  }

  return $questions;
}

/**
 * Return xml defining questions/answers for a specific creative commons license
 */
function creativecommons_get_questions_xml($license_id) {
  if ($license_id != 'none' && !is_null($license_id)) {
    $filename = $license_id .'.xml';
    return creativecommons_return_xml($filename, '/license/'. $license_id .'/');
  }
  return;
}

/**
 * Loop thru metadata and build form fields
 */
function creativecommons_build_metadata_fields($node, $prefix, $defaults = NULL) {
  // loop thru metadata fields
  $fields = '';
  $metadata_types = creativecommons_get_metadata_types();
  foreach ($metadata_types as $m => $d) {
    $sel = ($node->cc->metadata[$m]) ? $node->cc->metadata[$m] : '';
    if (is_array($defaults) && array_key_exists($m, $defaults)) {
      if (is_null($sel))
        $sel = $defaults[$m];
    }

    // build metadata form fields
    switch (drupal_strtolower($m)) {
      case 'format':
        $formats = creativecommons_get_formats();
        $form[$prefix]['metadata'][$m] = array(
          '#type' => 'select',
          '#title' => t($d),
          '#default_value' => $sel,
          '#options' => $formats,
          '#description' => NULL,
          '#attributes' => NULL,
          '#required' => $req,
        );
        break;

      case 'description':
        $form[$prefix]['metadata'][$m] = array(
          '#type' => 'textarea',
          '#title' => t($d),
          '#default_value' => $sel,
          '#cols' => 60,
          '#rows' => 5,
          '#description' => NULL,
          '#attributes' => NULL,
          '#required' => $req,
        );
        break;

      default:
        $form[$prefix]['metadata'][$m] = array(
          '#type' => 'textfield',
          '#title' => t($d),
          '#default_value' => $sel,
          '#size' => 50,
          '#maxlength' => 255,
          '#description' => NULL,
          '#attributes' => NULL,
          '#required' => $req,
        );
        break;
    }
  }
return system_settings_form($form);
}

/**
 * Implementation of hook_footer() -- display site license on footer of each page
 */
function creativecommons_footer() {
  if ($cc_data = variable_get('creativecommons_default_license', NULL)) {
    $cc = unserialize(stripslashes($cc_data));
    if (is_object($cc) && variable_get('creativecommons_site_license_display', FALSE)) {
      $output .= $cc->get_html(TRUE);
      if (variable_get('creativecommons_site_license_embed', FALSE))
        $output .= '<!-- '. $cc->get_rdf() .' -->';
    }
    return $output;
  }
}


/**
 * Return array of formats.
 * Uses associative array to preserve content name in form values.
 */
function creativecommons_get_formats() {
  $f = array(
    'other' => 'Other',
    'audio' => 'Audio',
    'video' => 'Video',
    'image' => 'Image',
    'text' => 'Text',
    'interactive' => 'Interactive');
  return $f;
}


/**
 * Implementation of hook_nodeapi().
 */
function creativecommons_nodeapi(&$node, $op, $arg, $a4) {

  switch ($op) {
    // settings   'form post replaced by form_api
      case 'validate':
      if (variable_get("creativecommons_$node->type", 1))
        if ($_POST['edit'])
          creativecommons_validate($node);
      break;

    case 'load':
      if (variable_get("creativecommons_$node->type", 1))
        $node->cc = creativecommons_load($node);
      break;

    case 'view':
      creativecommons_view($node, FALSE, FALSE, TRUE);
      break;

    case 'insert':
    case 'update':
          creativecommons_delete($node);
          creativecommons_save($node);
      break;

    case 'delete':
      creativecommons_delete($node);
      break;


    case 'rss item':
      if ($item_license = creativecommons_xml($node))
        return $item_license;
      break;

  }
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function creativecommons_form_alter(&$form, $form_state, $form_id) {

  if (isset($form['type']) && $form['type']['#value'] .'_node_settings' == $form_id) {

    $node->type = $form['type']['#value'];
    $form['workflow']['creativecommons_'. $node->type] = array(
      '#type' => 'checkbox',
      '#title' => t("Apply the Creative Commons module to content type '". $node->type ."'"),
      '#return_value' => 1,
      '#default_value' => variable_get("creativecommons_". $node->type, 1),
    );
  }

  if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];    // got form

    if (variable_get("creativecommons_$node->type", 1)) {
        $form = array_merge($form, creativecommons_form($node));
    }
  }

  return $form;
}

/**
 * Append Creative Commons license to an RSS <item> node
 */
function creativecommons_xml($node) {
  if ($node->cc) {
    return array(
      array('key' => 'xmlns:creativeCommons', 'value' => $node->cc->license_uri)
    );
  }
  return;
}
/**
 * Append html and rdf content to node.
 *
 * TODO: this is replaced by hook_blook, which can better display human readable
 * license information, but hook_view() seems like it could be used for embedding
 * more meaningful machine readable RDF information (e.g. associating author, title
 * with content, etc.)
 */
function creativecommons_view($node, $teaser = FALSE, $page = FALSE) {
  // As the function is currently deprecated, the following line neuters it
  return;
  
  if ($node->cc) {
    // append html
    $output = $node->cc->get_html();

    // append rdf
    if (variable_get('creativecommons_rdf', TRUE))
      $output .= "<!-- ". $node->cc->get_rdf() ." -->";
    if ($output) {
      $node->content['body']['#value'] .= '<p class="creativecommons">'. $output .'</p>';
      if ($teaser)
        $node->content['teaser']['#value'] .= '<p class="creativecommons">'. $output .'</p>';
    }
    
    return $node;
  }
}

/**
 * Implementation of hook_block().
 */
function creativecommons_block($op='list', $delta=0, $edit = array()) { 
  // listing of blocks, such as on the admin/block page
  if ($op == "list") { 
    $blocks[0] = array(
      'info' => t('Creative Commons license'),
      'weight' => 0, 
      'enabled' => 1,   // default make it enabled 
      'region' => 'left', //TODO: content
      'theme'=>'garland',
    );
    
    // TODO: separate block for site license? or just an option...
    
    return $blocks;
  } 
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        if (!is_numeric(arg(1))) {
          return;
        }
        
        $nid = (int)arg(1);
        $node = node_load(array('nid'=>$nid));
        
        if ( $node && arg(0) == 'node' && ( $node->cc ) && ( (arg(2)=='view') || (arg(2)=='') ) ) {
          // append html
          $output = $node->cc->get_html();

          // append rdf
          if (variable_get('creativecommons_rdf', TRUE))
            $output .= "<!-- ". $node->cc->get_rdf() ." -->";
            
          if ($output) { 
            $block['content'] =  '<p class="creativecommons">'. $output .'</p>';
          }
        }
        
      return $block;
    }
  }
}


/**
 * Form for attaching Creative Commons license to a node
 */
function creativecommons_form($node) {

    if ($_POST) {

    if (is_array($_POST['creativecommons']['select_license_form']) ) {
      foreach ($_POST['creativecommons']['select_license_form'] as $key => $val ) {
        $_POST[$key] = $val;
      }
    }

    if (is_array($_POST['creativecommons']['cc']) ) {
      foreach ($_POST['creativecommons']['cc'] as $key => $val ) {
        $_POST['cc'][$key] = $val;
      }
    }

    $cc = new creativecommons_license($_POST['cc_license']);
    $node->cc = $cc;
    //TODO: make questions optional
    /* $p = $_POST['cc_license'];
    $questions = creativecommons_get_questions_array($p);
    foreach ($questions as $k => $v) {
      $post_val = $_POST['edit']['cc'][$k];
      if (in_array($post_val, $v['answers'])) {
        $questions[$k]['selected'] = $post_val;
      }
      else {
        // default to first answer in array
        $questions[$k]['selected'] = current($v['answers']);
      }
    }

    if (!$_POST['edit']['cc']['metadata']['source'])
      $_POST['edit']['cc']['metadata']['source'] = $base_url;
    $cc = new creativecommons_license($p, $questions, $_POST['edit']['cc']['metadata']);
    $node->cc = $cc;
    */
  }

  // if no licenses available (in admin > settings > creative commons) then no form displayed
  if (!$selected_licenses = variable_get('creativecommons_available_licenses', NULL))
    return;

  $cc_img = '<img src="'. CC_IMG_PATH .'/cc-choose-license.gif" alt="Creative Commons license" />';
  $cc_txt = '<p><a href="http://creativecommons.org/learn/licenses/" target="_blank">Creative Commons licenses</a> help you share your work while keeping your copyright. Other people can copy and distribute your work provided they give you credit -- and only on the conditions you specify here. This form helps you choose those conditions. Visit the Creative Commons website for an <a href="http://creativecommons.org/about/licenses/meet-the-licenses">explanation of the different licenses</a>.

Choose the <a href="http://creativecommons.org/licenses/publicdomain/">Public Domain license</a> or <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a> if you want to offer your work with no conditions.</p>';

  // add javascript to <head>
  $header = "\n  <script type=\"text/javascript\" src=\"". CC_JS_PATH ."/cc_toggle.js\"></script>";
  drupal_set_html_head($header);

  // built html output
  $output = t($cc_txt);

  //$selected = $node->cc_license;
  $selected = (is_null($node->cc_license)) ? $node->cc->license_type  : $node->cc_license;
  $prefix = 'cc';
  $output1 = creativecommons_select_license_form($node, $prefix);

  // if no license, then don't process the metadata
  //  note: this loses the metadata, need to preserve it somehow... maybe load the hidden layer,
  //  without the link to display:block, and no error handling.

  if (is_null($selected) || $selected == 'none') {
    $form['creativecommons'] = array(
      '#type' => 'fieldset',
      '#title' => $cc_img,
      '#prefix' => '<div class="attachments">',
      '#suffix' => '</div>',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
  );
  $form['creativecommons'][] = array('#value' => $output);
  $form['creativecommons']['select_license_form'] = $output1['select_license_form'];

  return $form;
}


/// ///////////////////////////////////
//if (!is_null($node->cc_license->license_type) && $node->cc_license->license_type != 'none')
//  $output .= cc_para("not an empty license");
/// //////////////////////////////////////


// required metadata
  $required = variable_get('creativecommons_required', array());

  // loop thru metadata fields
  $fields = '';
  $metadata_types = creativecommons_get_metadata_types();

  $form['creativecommons'] = array(
    '#type' => 'fieldset',
    '#title' => $cc_img,
    '#prefix' => '<div class="attachments">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  $form['creativecommons'][] = array('#value' => $output);
  $form['creativecommons']['select_license_form'] = $output1['select_license_form'];

  global $user;
  $link_txt = 'Click to include more information about your work.';
  $show_style = ($node->cc->show_meta) ? 'block' : 'none';
  $form['creativecommons'][] = array('#value' => '<p><a onclick="cc_toggle(\'\',\'cc_optional\');return FALSE;" href="javascript:cc_toggle(\'\',\'cc_optional\');return FALSE;"><span id="moreinfo">'. $link_txt .'</span></a></p>');
  $form['creativecommons'][] = array('#value' => '<div id="cc_optional" style="display:'. $show_style .';">');

  $form['creativecommons'][] = array('#value' => cc_para("button to save default user values"));


  foreach ($metadata_types as $m => $d) {
    $sel = ($node->cc->metadata[$m]) ? $node->cc->metadata[$m] : '';

    // validate data
    //if ($required) {
      $req = $required[$m] && $required[$m] != 0 ? TRUE : FALSE;
      if ($req && !$sel && !$node->cc->new) {
        form_set_error("creativecommons][cc][metadata][$m", t("Creative Commons: Please submit the $m for your content."));
        // show metadata block if errors exist
        $node->cc->show_meta = TRUE;
      }
      // show metadata block on creation of post
      else if ($node->cc->new)
        $node->cc->show_meta = TRUE;
    //}

    // build metadata form fields
    switch (drupal_strtolower($m)) {
      case 'format':
        $formats = creativecommons_get_formats();
        // $fields .= form_select(t($d), "cc][metadata][$m", $sel, $formats, NULL, NULL, NULL, $req);
        $form["creativecommons"]["cc"]["metadata"]["$m"] = array(
          '#type' => 'select',
          '#title' => t($d),
          '#default_value' => $sel,
          '#options' => $formats,
          '#description' => NULL,
          '#extra' => NULL,
          '#multiple' => NULL,
          '#required' => $req,
        );
        break;

      case 'description':
        // $fields .= form_textarea(t($d), "cc][metadata][$m", $sel, 60, 5, NULL, NULL, $req);
        $form["creativecommons"]["cc"]["metadata"]["$m"] = array(
          '#type' => 'textarea',
          '#title' => t($d),
          '#default_value' => $sel,
          '#cols' => 60,
          '#rows' => 5,
          '#description' => NULL,
          '#attributes' => NULL,
          '#required' => $req,
        );
        break;

      default:
        // $fields .= form_textfield(t($d), "cc][metadata][$m", $sel, 50, 255, NULL, NULL, $req);
        $form["creativecommons"]["cc"]["metadata"]["$m"] = array(
          '#type' => 'textfield',
          '#title' => t($d),
          '#default_value' => $sel,
          '#size' => 50,
          '#maxlength' => 255,
          '#description' => NULL,
          '#attributes' => NULL,
          '#required' => $req,
        );
        break;
    }
  }

    $form['creativecommons'][] = array('#value' => '</div>');

  return $form;
}

/**
 * Save license/node relationship in database
 */
function creativecommons_save($node) {
  // TODO: duplicate code -- copied from _form()
  if (is_array($_POST['creativecommons']['select_license_form']) ) {
    foreach ($_POST['creativecommons']['select_license_form'] as $key => $val ) {
      $_POST[$key] = $val;
    }
  }
  if (is_array($_POST['creativecommons']['cc']) ) {
    foreach ($_POST['creativecommons']['cc'] as $key => $val ) {
      $_POST['cc'][$key] = $val;
    }
  }
  $cc = new creativecommons_license($_POST['cc_license']);
  $node->cc = $cc;
  //end duplicate code


  if ($node->cc && !method_exists($node->cc, 'save') ) {
    echo 'bad behaviour';
  }

  if ($node->cc) {
    $node->cc->nid = $node->nid;
    $node->cc->save();
  }

  return;
}


// hook insert
/* function creativecommons_insert($node) {
  creativecommons_save($node);
} */

/**
  * hook update

function creativecommons_update($node) {
    creativecommons_delete($node);
    creativecommons_save($node);
}
  */

/**
  * Delete node/license relationship from database
  */
function creativecommons_delete($node) {
  if ($node->nid) {
    db_query("DELETE FROM {creativecommons} WHERE nid = %d", $node->nid);
  }
  return;
}


/**
  * Load the license for a specified node
  */
function creativecommons_load($node) {

  if ($node->nid && !isset($node->cc)) {
    $result = db_query("SELECT cc.data FROM {creativecommons} cc WHERE cc.nid = %d", $node->nid);
    if ($row = db_fetch_object($result)) {
      $data = stripslashes($row->data);
      $cc = unserialize($data);
      return $cc;
    }
  }
  return;
}


/**
  * validate hook
  */
function creativecommons_validate(&$node) {

  // check for warning is array first arg
  foreach ($node->creativecommons['select_license_form'] as $key => $val ) {
      $node->$key = $val;
  }
  foreach ($node->creativecommons['cc'] as $key => $val ) {
      $node->cc[$key] = $val;
  }
  // echo_pre($node);
  if (is_null($node->cc_license))
    $node->cc_license = (is_null($node->cc->license_type)) ? 'none' : $node->cc->license_type;

  $questions = creativecommons_get_questions_array($node->cc_license);
  // loop thru ?s, set to current val, else default to first answer in array
  foreach ($questions as $k => $v) {
    if (in_array($node->cc[$k], $v['answers']))
      $questions[$k]['selected'] = $node->cc[$k];
    else
      $questions[$k]['selected'] = current($v['answers']);
  }

  $cc = new creativecommons_license($node->cc_license, $questions, $node->cc['metadata']);

  if (!$node->cc)
    $cc->new = TRUE;
  $node->cc = $cc;

}


/**
  *  Debug code
  */
if (function_exists('echo_pre')) {
}
else {

function echo_pre($arr, $head = '') {
  echo "<pre>";
  if ($head !='') {
    echo "$head<br/>";
  }
  print_r($arr);
  echo "</pre>";
}

}
